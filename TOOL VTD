import json

import os

import random

import time

from colorama import Fore, Style, init

import pyfiglet

import requests

from requests.adapters import HTTPAdapter

from urllib3.util.retry import Retry



init()



def clear_screen():

    os.system("cls" if os.name == "nt" else "clear")



def print_colored_ascii_art(text):

    ascii_art = pyfiglet.figlet_format(text, font="slant")

    lines = ascii_art.splitlines()

    colors = [Fore.CYAN, Fore.MAGENTA, Fore.YELLOW, Fore.GREEN, Fore.BLUE]

    for i, line in enumerate(lines):

        print(colors[i % len(colors)] + line + Style.RESET_ALL)



# Hi·ªÉn th·ªã tr·∫°ng th√°i c∆∞·ª£c c·ªßa c√°c nh√¢n v·∫≠t

def display_bet_status():

    print(Fore.CYAN + "\n=== Tr·∫°ng th√°i c∆∞·ª£c hi·ªán t·∫°i ===" + Style.RESET_ALL)

    for athlete_id, bet in bets.items():

        status = "ƒêang c∆∞·ª£c" if bet["active"] else f"ƒêang d·ª´ng ({bet['stop_counter']} phi√™n c√≤n l·∫°i)"

        print(Fore.LIGHTYELLOW_EX + f"{titles[athlete_id]}: {status}, S·ªë ti·ªÅn c∆∞·ª£c: {bet['amount']} BUILD, Lo·∫°i c∆∞·ª£c: {bet['bet_group']}" + Style.RESET_ALL)

    print(Fore.CYAN + "==============================" + Style.RESET_ALL)



# Danh s√°ch c√°c danh hi·ªáu

titles = {

    1: "B·∫≠c Th·∫ßy T·∫•n C√¥ng",

    2: "Quy·ªÅn S·∫Øt",

    3: "Th·ª£ L·∫∑n S√¢u",

    4: "C∆°n L·ªëc S√¢n C·ªè",

    5: "Hi·ªáp Sƒ© Phi Nhanh",

    6: "Vua Home Rune"

}



# Nh·∫≠p th√¥ng tin ng∆∞·ªùi d√πng

clear_screen()

print_colored_ascii_art("TOOL-SANGDZ")

print(Fore.CYAN + "Phi√™n b·∫£n th·ª≠ nghi·ªám - C√¥ng c·ª• c∆∞·ª£c t·ª± ƒë·ªông" + Style.RESET_ALL)

user_id = input(Fore.CYAN + "Nh·∫≠p user_id: ")

user_login = "login_v2"

user_secret_key = input(Fore.CYAN + "Nh·∫≠p user_secret_key: ")



# Nh·∫≠p c√°c th√¥ng s·ªë c∆∞·ª£c

initial_bet_amount = int(input(Fore.CYAN + "Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu: "))

bet_increase_rate = float(input(Fore.CYAN + "Nh·∫≠p t·ª∑ l·ªá tƒÉng c∆∞·ª£c khi thua (v√≠ d·ª•: 2.0, 10.0): "))

loss_threshold = int(input(Fore.CYAN + "Nh·∫≠p s·ªë v√°n thua ƒë·ªÉ tƒÉng c∆∞·ª£c: "))

stop_after_win = int(input(Fore.CYAN + "Nh·∫≠p s·ªë phi√™n d·ª´ng c∆∞·ª£c sau th·∫Øng (0 ƒë·ªÉ kh√¥ng d·ª´ng): "))

profit_stop = int(input(Fore.CYAN + "Nh·∫≠p m·ª©c l√£i d·ª´ng c∆∞·ª£c (BUILD): "))

loss_stop = int(input(Fore.CYAN + "Nh·∫≠p m·ª©c l·ªó d·ª´ng c∆∞·ª£c (BUILD): "))



# Ch·ªçn ki·ªÉu reset

print(Fore.CYAN + "\nCh·ªçn ki·ªÉu reset:" + Style.RESET_ALL)

print("1. Reset l·∫ª (reset ti·ªÅn c∆∞·ª£c c·ªßa ng∆∞·ªùi th·∫Øng)")

print("2. Reset all (d·ª´ng ho·∫∑c reset t·∫•t c·∫£)")

reset_mode = int(input(Fore.LIGHTYELLOW_EX + "Nh·∫≠p l·ª±a ch·ªçn (1/2): "))

if reset_mode == 2:

    print(Fore.CYAN + "\nCh·ªçn logic reset all:" + Style.RESET_ALL)

    print("1. Stop all (d·ª´ng t·∫•t c·∫£ khi m·ªôt ng∆∞·ªùi th·∫Øng)")

    print("2. Stop l·∫ª (d·ª´ng ng∆∞·ªùi th·∫Øng, ti·∫øp t·ª•c ng∆∞·ªùi thua)")

    reset_all_logic = int(input(Fore.LIGHTYELLOW_EX + "Nh·∫≠p l·ª±a ch·ªçn (1/2): "))

else:

    reset_all_logic = None



# Ch·ªçn logic d·ª´ng c∆∞·ª£c

print(Fore.CYAN + "\nCh·ªçn logic d·ª´ng c∆∞·ª£c:" + Style.RESET_ALL)

print("1. C√≥ logic (reset phi√™n ƒë·ª£i n·∫øu g·∫∑p ng∆∞·ªùi ƒëang c∆∞·ª£c)")

print("2. Kh√¥ng logic (d·ª´ng b√¨nh th∆∞·ªùng)")

stop_logic = int(input(Fore.LIGHTYELLOW_EX + "Nh·∫≠p l·ª±a ch·ªçn (1/2): "))



# Ch·ªçn ng∆∞·ªùi c∆∞·ª£c v√† ki·ªÉu c∆∞·ª£c

bets = {}

print(Fore.CYAN + "\nCh·ªçn ng∆∞·ªùi ƒë·ªÉ c∆∞·ª£c (nh·∫≠p 0 ƒë·ªÉ k·∫øt th√∫c):" + Style.RESET_ALL)

for idx, (id, title) in enumerate(titles.items(), 1):

    print(f"{idx}. {title}")

print(f"{len(titles) + 1}. T·∫•t c·∫£")

while True:

    choice = int(input(Fore.LIGHTYELLOW_EX + f"Ch·ªçn s·ªë th·ª© t·ª± (1-{len(titles) + 1}, 0 ƒë·ªÉ k·∫øt th√∫c): "))

    if choice == 0:

        break

    if choice == len(titles) + 1:  # Ch·ªçn t·∫•t c·∫£

        bet_type = int(input(Fore.LIGHTYELLOW_EX + "C∆∞·ª£c cho t·∫•t c·∫£ nh√¢n v·∫≠t (1: Winner, 2: Not Winner): "))

        bet_group = "winner" if bet_type == 1 else "not_winner"

        for athlete_id in titles.keys():

            bets[athlete_id] = {

                "bet_group": bet_group,

                "amount": initial_bet_amount,

                "losses": 0,

                "stop_counter": 0,

                "active": True,

                "last_bet_success": False

            }

        print(Fore.LIGHTGREEN_EX + f"ƒê√£ ch·ªçn c∆∞·ª£c {bet_group} cho t·∫•t c·∫£ nh√¢n v·∫≠t" + Style.RESET_ALL)

        break

    if 1 <= choice <= len(titles):

        athlete_id = list(titles.keys())[choice - 1]

        bet_type = int(input(Fore.YELLOW + f"C∆∞·ª£c cho {titles[athlete_id]} (1: Winner, 2: Not Winner): "))

        bet_group = "winner" if bet_type == 1 else "not_winner"

        bets[athlete_id] = {

            "bet_group": bet_group,

            "amount": initial_bet_amount,

            "losses": 0,

            "stop_counter": 0,

            "active": True,

            "last_bet_success": False

        }

    else:

        print(Fore.RED + "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" + Style.RESET_ALL)



headers = {

    "user-id": user_id,

    "user-login": user_login,

    "user-secret-key": user_secret_key

}



# T·∫°o session v·ªõi c∆° ch·∫ø retry

session = requests.Session()

retries = Retry(total=3, backoff_factor=0.5, status_forcelist=[429, 500, 502, 503, 504])

session.mount("https://", HTTPAdapter(max_retries=retries))



so_du_ban_dau = None

current_balance = None

top_champions = []

expire_seconds = None

first_round = True

chuoi_thang = 0



def login():

    global so_du_ban_dau, current_balance

    try:

        current_time = int(time.time() * 1000)

        url_login = f"https://user.3games.io/user/regist?is_cwallet=1&is_mission_setting=true&version=&time={current_time}"

        response = session.get(url_login, headers=headers, timeout=10)

        if response.status_code == 200:

            data = response.json()

            if data.get("code") == 200:

                username = data["data"]["username"]

                ctoken_contribute = data["data"]["cwallet"]["ctoken_contribute"]

                token_contribute_rounded = round(ctoken_contribute)

                so_du_ban_dau = token_contribute_rounded

                current_balance = token_contribute_rounded

                print(Fore.CYAN + f"Username: {username}")

                print(Fore.CYAN + f"S·ªë D∆∞ Ban ƒê·∫ßu: {token_contribute_rounded} BUILD" + Style.RESET_ALL)

            else:

                print(Fore.RED + "ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng" + Style.RESET_ALL)

                return False

        else:

            print(Fore.RED + f"L·ªói m·∫°ng: {response.status_code}" + Style.RESET_ALL)

            return False

    except requests.RequestException as e:

        print(Fore.RED + f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}" + Style.RESET_ALL)

        return False

    return True



def lich_su():

    global expire_seconds, first_round

    url_main = "https://api.sprintrun.win/sprint/home?asset=BUILD"

    try:

        response = session.get(url_main, headers=headers, timeout=10)

        if response.status_code == 200:

            data = response.json()

            if data.get("code") == 0:

                expire_seconds = data["data"].get("expire_seconds", 0)

                issue_id = data["data"].get("issue_id")

                print(Fore.CYAN + f"üëæV√≤ng ch∆°i hi·ªán t·∫°i: #{issue_id}")

                print(Fore.CYAN + f"K·∫øt qu·∫£ c√≥ sau: {expire_seconds} gi√¢y" + Style.RESET_ALL)

                display_bet_status()

                if first_round:

                    print(Fore.LIGHTYELLOW_EX + "ƒêang ƒë·ª£i phi√™n ƒë·∫ßu ti√™n tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu c∆∞·ª£c..." + Style.RESET_ALL)

                    first_round = False

                    for athlete_id, bet in bets.items():

                        if bet["active"]:

                            success = dat_cuoc(athlete_id, issue_id, bet["bet_group"], bet["amount"])

                            bet["last_bet_success"] = success

                            if not success:

                                print(Fore.LIGHTYELLOW_EX + f"B·ªè qua ƒë·∫∑t c∆∞·ª£c cho {titles[athlete_id]} do l·ªói ·ªü v√≤ng #{issue_id}, s·∫Ω th·ª≠ l·∫°i ·ªü v√≤ng ti·∫øp theo" + Style.RESET_ALL)

                else:

                    check_results(issue_id)

                    for athlete_id, bet in bets.items():

                        if bet["active"]:

                            success = dat_cuoc(athlete_id, issue_id, bet["bet_group"], bet["amount"])

                            bet["last_bet_success"] = success

                            if not success:

                                print(Fore.LIGHTYELLOW_EX + f"B·ªè qua ƒë·∫∑t c∆∞·ª£c cho {titles[athlete_id]} do l·ªói ·ªü v√≤ng #{issue_id}, s·∫Ω th·ª≠ l·∫°i ·ªü v√≤ng ti·∫øp theo" + Style.RESET_ALL)

            else:

                print(Fore.RED + "L·ªói API response" + Style.RESET_ALL)

        else:

            print(Fore.RED + f"HTTP Error: {response.status_code}" + Style.RESET_ALL)

    except requests.RequestException as e:

        print(Fore.RED + f"L·ªói k·∫øt n·ªëi khi l·∫•y d·ªØ li·ªáu phi√™n: {e}" + Style.RESET_ALL)



def check_results(issue_id):

    global top_champions, current_balance

    url_lich_su = f"https://api.sprintrun.win/sprint/issue_result?issue={issue_id-1}&asset=BUILD"

    max_retries = 10

    retry_delay = 2

    for attempt in range(max_retries):

        try:

            response_lich_su = session.get(url_lich_su, headers=headers, timeout=10)

            if response_lich_su.status_code == 200:

                data = response_lich_su.json()

                if data.get("code") == 0:

                    athlete_rank = data["data"].get("athlete_rank", [])

                    if athlete_rank:

                        id_nha_vo_dich = athlete_rank[0]

                        nha_vo_dich = titles.get(id_nha_vo_dich, "Kh√¥ng x√°c ƒë·ªãnh")

                        print(Fore.CYAN + f"Nh√† v√¥ ƒë·ªãch v√≤ng tr∆∞·ªõc: {nha_vo_dich}" + Style.RESET_ALL)

                        top_champions.insert(0, nha_vo_dich)

                        if len(top_champions) > 3:

                            top_champions.pop()

                        process_bets(id_nha_vo_dich, issue_id)

                        update_balance()

                        print(Fore.CYAN + f"üí∏S·ªë d∆∞ hi·ªán t·∫°i: {current_balance} BUILD" + Style.RESET_ALL)

                        print("---------------------------------------------")

                        return

                    else:

                        print(Fore.LIGHTYELLOW_EX + f"Ch∆∞a c√≥ k·∫øt qu·∫£ cho v√≤ng #{issue_id-1} (l·∫ßn th·ª≠ {attempt+1}/{max_retries})" + Style.RESET_ALL)

                else:

                    print(Fore.RED + f"L·ªói d·ªØ li·ªáu t·ª´ API cho v√≤ng #{issue_id-1}: {data.get('message', 'Kh√¥ng r√µ')}" + Style.RESET_ALL)

            else:

                print(Fore.RED + f"HTTP Error cho v√≤ng #{issue_id-1}: {response_lich_su.status_code}" + Style.RESET_ALL)

        except requests.RequestException as e:

            print(Fore.RED + f"L·ªói k·∫øt n·ªëi khi ki·ªÉm tra k·∫øt qu·∫£ v√≤ng #{issue_id-1}: {e}" + Style.RESET_ALL)

        if attempt < max_retries - 1:

            time.sleep(retry_delay)

    print(Fore.RED + f"B·ªè qua x·ª≠ l√Ω th·∫Øng/thua cho v√≤ng #{issue_id-1} do kh√¥ng l·∫•y ƒë∆∞·ª£c k·∫øt qu·∫£ sau {max_retries} l·∫ßn th·ª≠" + Style.RESET_ALL)

    for athlete_id, bet in bets.items():

        if not bet["active"] and bet["stop_counter"] > 0:

            bet["stop_counter"] -= 1

            if bet["stop_counter"] <= 0:

                bet["active"] = True

                print(Fore.LIGHTYELLOW_EX + f"{titles[athlete_id]} s·∫µn s√†ng c∆∞·ª£c l·∫°i ·ªü v√≤ng ti·∫øp theo" + Style.RESET_ALL)

    update_balance()

    print(Fore.CYAN + f"üí∏S·ªë d∆∞ hi·ªán t·∫°i: {current_balance} BUILD" + Style.RESET_ALL)

    print("---------------------------------------------")



def process_bets(winner_id, issue_id):

    global bets, chuoi_thang, current_balance

    winner_name = titles.get(winner_id, "Kh√¥ng x√°c ƒë·ªãnh")

    any_winner = False

    for athlete_id, bet in bets.items():

        if not bet["active"]:

            if stop_logic == 1 and bet["stop_counter"] > 0:

                for other_id, other_bet in bets.items():

                    if other_bet["active"] and titles[athlete_id] in top_champions:

                        bet["stop_counter"] = stop_after_win

                        print(Fore.LIGHTYELLOW_EX + f"Reset th·ªùi gian d·ª´ng cho {titles[athlete_id]}" + Style.RESET_ALL)

            bet["stop_counter"] -= 1

            if bet["stop_counter"] <= 0:

                bet["active"] = True

            continue

        if bet["last_bet_success"]:

            is_win = (bet["bet_group"] == "winner" and athlete_id == winner_id) or \

                     (bet["bet_group"] == "not_winner" and athlete_id != winner_id)

            if is_win:

                payout_ratio = 5.0 if bet["bet_group"] == "winner" else 1.15

                winnings = bet["amount"] * payout_ratio

                profit = winnings - bet["amount"]

                current_balance += winnings

                print(Fore.LIGHTGREEN_EX + f"‚úÖTh·∫Øng c∆∞·ª£c cho {titles[athlete_id]}: +{profit:.2f} BUILD (T·ª∑ l·ªá: x{payout_ratio})" + Style.RESET_ALL)

                chuoi_thang += 1

                any_winner = True

                if reset_mode == 1:

                    bet["amount"] = initial_bet_amount

                    bet["losses"] = 0

                    bet["active"] = False if stop_after_win > 0 else True

                    bet["stop_counter"] = stop_after_win

                    print(Fore.LIGHTYELLOW_EX + f"Reset c∆∞·ª£c v√† d·ª´ng {stop_after_win} phi√™n cho {titles[athlete_id]}" + Style.RESET_ALL)

            else:

                print(Fore.RED + f"‚ùåThua c∆∞·ª£c cho {titles[athlete_id]}: -{bet['amount']} BUILD" + Style.RESET_ALL)

                bet["losses"] += 1

                current_balance -= bet["amount"]

                if bet["losses"] >= loss_threshold:

                    bet["amount"] = int(bet["amount"] * bet_increase_rate)

                    bet["losses"] = 0

                    print(Fore.LIGHTYELLOW_EX + f"üí∞TƒÉng c∆∞·ª£c cho {titles[athlete_id]} l√™n {bet['amount']} BUILD" + Style.RESET_ALL)

        else:

            print(Fore.LIGHTYELLOW_EX + f"Kh√¥ng t√≠nh th·∫Øng/thua cho {titles[athlete_id]} v√¨ c∆∞·ª£c kh√¥ng th√†nh c√¥ng ·ªü v√≤ng tr∆∞·ªõc" + Style.RESET_ALL)

    if any_winner and reset_mode == 2:

        if reset_all_logic == 1:

            for bet in bets.values():

                bet["active"] = False

                bet["stop_counter"] = stop_after_win

            print(Fore.LIGHTYELLOW_EX + f"D·ª´ng t·∫•t c·∫£ c∆∞·ª£c trong {stop_after_win} phi√™n!" + Style.RESET_ALL)

        else:

            for athlete_id, bet in bets.items():

                bet["amount"] = initial_bet_amount

                bet["losses"] = 0

                bet["active"] = False if stop_after_win > 0 else True

                bet["stop_counter"] = stop_after_win

                print(Fore.LIGHTYELLOW_EX + f"D·ª´ng c∆∞·ª£c cho {titles[athlete_id]} trong {stop_after_win} phi√™n" + Style.RESET_ALL)

    print(Fore.LIGHTMAGENTA_EX + f"üèÜChu·ªói c∆∞·ª£c: {chuoi_thang} v√°n" + Style.RESET_ALL)



def dat_cuoc(athlete_id, issue_id, bet_group, amount):

    if current_balance is None:

        print(Fore.RED + f"‚ùå ƒê·∫∑t c∆∞·ª£c th·∫•t b·∫°i cho {titles[athlete_id]} ({bet_group}) - üëæV√≤ng #{issue_id}: S·ªë d∆∞ ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t" + Style.RESET_ALL)

        return False

    if current_balance < amount:

        print(Fore.RED + f"‚ùå ƒê·∫∑t c∆∞·ª£c th·∫•t b·∫°i cho {titles[athlete_id]} ({bet_group}) - üëæV√≤ng #{issue_id}: S·ªë d∆∞ kh√¥ng ƒë·ªß ({current_balance} BUILD < {amount} BUILD). D·ª´ng c∆∞·ª£c!" + Style.RESET_ALL)

        bets[athlete_id]["active"] = False

        bets[athlete_id]["stop_counter"] = 0

        return False

    payload = {

        "asset_type": "BUILD",

        "athlete_id": athlete_id,

        "bet_amount": amount,

        "bet_group": bet_group,

        "issue_id": issue_id

    }

    max_retries = 2

    retry_delay = 1

    for attempt in range(max_retries):

        try:

            response = session.post("https://api.sprintrun.win/sprint/bet", json=payload, headers=headers, timeout=10)

            if response.status_code == 200:

                try:

                    data = response.json()

                    if data.get("code") == 0:

                        print(Fore.LIGHTGREEN_EX + f"üé≤ ƒê·∫∑t c∆∞·ª£c th√†nh c√¥ng {amount} BUILD cho {titles[athlete_id]} ({bet_group}) - V√≤ng #{issue_id}" + Style.RESET_ALL)

                        return True

                    else:

                        error_message = data.get("message", "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API")

                        print(Fore.RED + f"‚ùå ƒê·∫∑t c∆∞·ª£c th·∫•t b·∫°i cho {titles[athlete_id]} ({bet_group}) - üëæV√≤ng #{issue_id}: {error_message}" + Style.RESET_ALL)

                        return False

                except ValueError:

                    print(Fore.RED + f"‚ùå ƒê·∫∑t c∆∞·ª£c th·∫•t b·∫°i cho {titles[athlete_id]} ({bet_group}) - üëæV√≤ng #{issue_id}: Ph·∫£n h·ªìi API kh√¥ng ph·∫£i JSON h·ª£p l·ªá" + Style.RESET_ALL)

                    return False

            else:

                print(Fore.RED + f"‚ùå ƒê·∫∑t c∆∞·ª£c th·∫•t b·∫°i cho {titles[athlete_id]} ({bet_group}) - üëæV√≤ng #{issue_id}: L·ªói m·∫°ng (HTTP {response.status_code})" + Style.RESET_ALL)

                return False

        except requests.RequestException as e:

            print(Fore.RED + f"‚ùå L·ªói k·∫øt n·ªëi khi ƒë·∫∑t c∆∞·ª£c cho {titles[athlete_id]} ({bet_group}) - üëæV√≤ng #{issue_id} (l·∫ßn th·ª≠ {attempt+1}/{max_retries}): {str(e)}" + Style.RESET_ALL)

            if attempt < max_retries - 1:

                time.sleep(retry_delay)

    print(Fore.LIGHTYELLOW_EX + f"B·ªè qua ƒë·∫∑t c∆∞·ª£c cho {titles[athlete_id]} ·ªü üëæv√≤ng #{issue_id} sau {max_retries} l·∫ßn th·ª≠, s·∫Ω th·ª≠ l·∫°i ·ªü v√≤ng ti·∫øp theo" + Style.RESET_ALL)

    return False



def update_balance():

    global current_balance

    try:

        current_time = int(time.time() * 1000)

        url_login = f"https://user.3games.io/user/regist?is_cwallet=1&is_mission_setting=true&version=&time={current_time}"

        response = session.get(url_login, headers=headers, timeout=10)

        if response.status_code == 200:

            data = response.json()

            if data.get("code") == 200:

                ctoken_contribute = data["data"]["cwallet"]["ctoken_contribute"]

                api_balance = round(ctoken_contribute)

                current_balance = api_balance

                loi_lo = current_balance - so_du_ban_dau

                if loi_lo >= 0:

                    print(Fore.LIGHTGREEN_EX + f"üìàƒêang l·ªùi: {loi_lo} BUILD" + Style.RESET_ALL)

                else:

                    print(Fore.RED + f"üìâƒêang l·ªó: {loi_lo} BUILD" + Style.RESET_ALL)

                if loi_lo >= profit_stop or loi_lo <= -loss_stop:

                    print(Fore.RED + "ƒê·∫°t ng∆∞·ª°ng l√£i/l·ªó. D·ª´ng ch∆∞∆°ng tr√¨nh!" + Style.RESET_ALL)

                    exit()

            else:

                print(Fore.RED + "L·ªói m·∫°ng khi c·∫≠p nh·∫≠t s·ªë d∆∞" + Style.RESET_ALL)

        else:

            print(Fore.RED + f"L·ªói m·∫°ng khi c·∫≠p nh·∫≠t s·ªë d∆∞: HTTP {response.status_code}" + Style.RESET_ALL)

    except requests.RequestException as e:

        print(Fore.RED + f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi c·∫≠p nh·∫≠t s·ªë d∆∞: {e}" + Style.RESET_ALL)



if __name__ == "__main__":

    clear_screen()

    print_colored_ascii_art("HALOTOOL")

    if login():

        while True:

            lich_su()

            time.sleep(max(expire_seconds, 5) + 7)
