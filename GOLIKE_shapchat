import os, sys, time, random, json, socket
import cloudscraper
import requests
from time import sleep
from colorama import Fore, init
from rich.console import Console
from rich.prompt import IntPrompt
from rich.live import Live
from rich.text import Text
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich import box

init(autoreset=True)
console = Console()

def kiem_tra_mang():
    try:
        socket.create_connection(("8.8.8.8", 53), timeout=3)
    except OSError:
        console.print("[red]❌ Mạng không ổn định hoặc mất kết nối![/red]")
        sys.exit(1)

kiem_tra_mang()
scraper = cloudscraper.create_scraper()

banner = f"""
{Fore.YELLOW}╔════════════════════════════════════════════════════════╗
{Fore.YELLOW}║                                                        ║
{Fore.YELLOW}║   \033[38;2;0;120;255m████████╗ ██████╗  ██████╗ ██╗     \033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;140;255m╚══██╔══╝██╔═══██╗██╔═══██╗██║     \033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;160;255m   ██║   ██║   ██║██║   ██║██║     \033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;180;255m   ██║   ██║   ██║██║   ██║██║     \033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;200;255m   ██║   ╚██████╔╝╚██████╔╝███████╗\033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;220;255m   ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝\033[0m{Fore.YELLOW}║
{Fore.YELLOW}║                                                        ║
{Fore.YELLOW}╚════════════════════════════════════════════════════════╝
{Fore.WHITE}════════════════════════════════════════════════════════════
{Fore.WHITE}Phiên Bản: {Fore.YELLOW}TOOL_GOLIKE_SNAPCHAT_║ ADMIN: \033[38;2;0;220;255mVILÂM
{Fore.WHITE}════════════════════════════════════════════════════════════
[{Fore.RED}⚡{Fore.WHITE}] Zalo: \033[38;2;0;220;255m0368782618
[{Fore.RED}⚡{Fore.WHITE}] Lưu ý: AE dùng tool bị lỗi thì gọi ADMIN để sửa
{Fore.WHITE}════════════════════════════════════════════════════════════
"""

os.system('cls' if os.name == 'nt' else 'clear')
print(banner)
sleep(1)

# === Load Authorization & Token ===
def load_auth():
    try:
        with open("Authorization.txt", "r") as f:
            auth = f.read().strip()
        with open("token.txt", "r") as f:
            token = f.read().strip()
        if not auth or not token:
            raise FileNotFoundError
        return auth, token
    except:
        auth = input("💸 Nhập AUTHORIZATION GOLIKE: ")
        token = input("💸 Nhập TOKEN (T của GoLike): ")
        with open("Authorization.txt", "w") as f:
            f.write(auth)
        with open("token.txt", "w") as f:
            f.write(token)
        return auth, token

author, token = load_auth()

headers = {
    'Accept': 'application/json, text/plain, */*',
    'Content-Type': 'application/json;charset=utf-8',
    'Authorization': author,
    't': token,
    'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K)',
    'Referer': 'https://app.golike.net/account/manager/snapchat',
}

def chonacc():
    try:
        res = scraper.get('https://gateway.golike.net/api/snapchat-account', headers=headers).json()
        return res
    except:
        sys.exit()

def nhannv(account_id):
    try:
        params = {'account_id': account_id, 'data': 'null'}
        res = scraper.get('https://gateway.golike.net/api/advertising/publishers/snapchat/jobs', headers=headers, params=params)
        return res.json()
    except:
        sys.exit()

def hoanthanh(ads_id, account_id):
    try:
        data = {'ads_id': ads_id, 'account_id': account_id, 'async': True, 'data': None}
        res = scraper.post('https://gateway.golike.net/api/advertising/publishers/snapchat/complete-jobs', headers=headers, json=data, timeout=6)
        return res.json()
    except:
        sys.exit()

def baoloi(ads_id, object_id, account_id, loai):
    try:
        scraper.post('https://gateway.golike.net/api/report/send', headers=headers, json={
            'description': 'Tôi đã làm Job này rồi',
            'users_advertising_id': ads_id,
            'type': 'ads',
            'provider': 'snapchat',
            'fb_id': account_id,
            'error_type': 6,
        })
        scraper.post('https://gateway.golike.net/api/advertising/publishers/snapchat/skip-jobs', headers=headers, json={
            'ads_id': ads_id,
            'object_id': object_id,
            'account_id': account_id,
            'type': loai,
        })
    except:
        sys.exit()

# === Hiển thị danh sách acc ===
response = chonacc()
if response.get("status") != 200:
    console.print("[red]❌ Auth hoặc Token sai! Kiểm tra file.[/red]")
    sys.exit(1)

accounts = response["data"]
table = Table(title="📱 DANH SÁCH ACC", box=box.ROUNDED)
table.add_column("STT", style="cyan", justify="center")
table.add_column("Tên Tài Khoản", style="magenta")
table.add_column("Trạng Thái", style="green")

for i, acc in enumerate(accounts, 1):
    table.add_row(str(i), acc.get("name", "Không tên"), "Online" if acc.get("status") == 1 else "Offline")

console.print(table)

# === Chọn acc ===
while True:
    try:
        chon = int(input("👉 Chọn tài khoản: "))
        if 1 <= chon <= len(accounts):
            acc = accounts[chon - 1]
            account_id = acc["id"]
            break
    except:
        console.print("[red]⚠️ Nhập sai, thử lại![/red]")

# === Chọn nhiệm vụ ===
nv_panel = Panel("[1] Nhiệm vụ Follow", title="🎯 Nhiệm vụ", border_style="bright_blue")
console.print(nv_panel)

while True:
    try:
        loai_nv = IntPrompt.ask("🔰 Chọn loại nhiệm vụ", default=1)
        if loai_nv == 1:
            break
    except:
        console.print("[red]❌ Nhập sai![/red]")

# === Nhận job và làm job ===
dem = tong = 0

def countdown(delay):
    spinner = ["|", "/", "-", "\\"]
    with Live(refresh_per_second=10) as live:
        for i in range(delay, -1, -1):
            spin = spinner[i % len(spinner)]
            panel = Panel(Text(f"⏳ {spin} Delay chống block | {i}s", style="bold green"), title="Đếm ngược")
            live.update(panel)
            sleep(1)

def nhan_tien_progress():
    with Progress(SpinnerColumn(), TextColumn("[progress.description]{task.description}"), BarColumn(), TimeElapsedColumn(), transient=True) as p:
        t = p.add_task("🪙 Nhận xu", total=100)
        for _ in range(100):
            p.update(t, advance=1)
            time.sleep(0.01)

while True:
    job = nhannv(account_id)
    if job.get("status") != 200 or not job["data"].get("link"):
        console.print("[red]❌ Không có job. Đợi thêm...[/red]")
        time.sleep(2)
        continue

    ads_id = job["data"]["id"]
    object_id = job["data"]["object_id"]
    job_type = job["data"]["type"]

    if job_type != "follow":
        baoloi(ads_id, object_id, account_id, job_type)
        continue

    countdown(random.randint(10, 20))

    nhan = hoanthanh(ads_id, account_id)
    if nhan.get("status") == 200:
        nhan_tien_progress()
        xu = nhan["data"].get("prices", 0)
        tong += xu
        dem += 1
        tb = Table(title=f"🍉 JOB #{dem} HOÀN THÀNH", box=box.ROUNDED)
        tb.add_column("Thời gian", justify="center")
        tb.add_column("Xu nhận", justify="center")
        tb.add_column("Tổng xu", justify="center")
        tb.add_row(time.strftime("%H:%M:%S"), f"+{xu} đ", f"{tong:,} đ")
        os.system('cls' if os.name == 'nt' else 'clear')
        print(banner)
        console.print(tb)
    else:
        baoloi(ads_id, object_id, account_id, job_type)
        console.print("[red]❌ Job lỗi, đã báo lỗi và bỏ qua[/red]")
    sleep(1)
