import os
import time
import pyfiglet
import aiohttp
import asyncio
from colorama import Fore, Style, init
import requests
init()

def clear_screen():
    os.system("cls" if os.name == "nt" else "clear")

current_time = int(time.time() * 1000)
user_id = input(Fore.YELLOW + "Nh·∫≠p UID: ")
user_login = input(Fore.YELLOW + "Nh·∫≠p user_login (m·∫∑c ƒë·ªãnh: login_v2): ") or "login_v2"
user_secret_key = input(Fore.YELLOW + "Nh·∫≠p secret key: ")
amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu (nh·ªè nh·∫•t 1 build): "))

# C√†i ƒë·∫∑t Stop Loss/Take Profit
print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T STOP LOSS/TAKE PROFIT ===" + Style.RESET_ALL)
while True:
    stop_loss_input = input(Fore.YELLOW + "B·∫≠t Stop Loss? (y/n): ").strip().lower()
    if stop_loss_input == 'y':
        stop_loss_enabled = True
        break
    elif stop_loss_input == 'n':
        stop_loss_enabled = False
        break
    else:
        print(Fore.RED + "Vui l√≤ng nh·∫≠p 'y' ho·∫∑c 'n'" + Style.RESET_ALL)

stop_loss_amount = 0
take_profit_amount = 0

if stop_loss_enabled:
    stop_loss_amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë BUILD d·ª´ng l·ªó (VD: 100): "))
    take_profit_amount = int(input(Fore.YELLOW + "Nh·∫≠p s·ªë BUILD d·ª´ng l·ªùi (VD: 200): "))

# C√†i ƒë·∫∑t h·ªá s·ªë g·∫•p khi thua
print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T H·ªÜ S·ªê G·∫§P C∆Ø·ª¢C ===" + Style.RESET_ALL)
print(Fore.WHITE + "H·ªá s·ªë g·∫•p m·∫∑c ƒë·ªãnh: L·∫ßn 1: x15, L·∫ßn 2: x20, L·∫ßn 3: x15" + Style.RESET_ALL)
while True:
    custom_input = input(Fore.YELLOW + "T√πy ch·ªânh h·ªá s·ªë g·∫•p? (y/n): ").strip().lower()
    if custom_input == 'y':
        custom_multiplier = True
        break
    elif custom_input == 'n':
        custom_multiplier = False
        break
    else:
        print(Fore.RED + "Vui l√≤ng nh·∫≠p 'y' ho·∫∑c 'n'" + Style.RESET_ALL)

multiplier_1 = 15
multiplier_2 = 20
multiplier_3 = 15

if custom_multiplier:
    multiplier_1 = float(input(Fore.YELLOW + "Nh·∫≠p h·ªá s·ªë g·∫•p l·∫ßn 1 (m·∫∑c ƒë·ªãnh 15): ") or "15")
    multiplier_2 = float(input(Fore.YELLOW + "Nh·∫≠p h·ªá s·ªë g·∫•p l·∫ßn 2 (m·∫∑c ƒë·ªãnh 20): ") or "20")
    multiplier_3 = float(input(Fore.YELLOW + "Nh·∫≠p h·ªá s·ªë g·∫•p l·∫ßn 3 (m·∫∑c ƒë·ªãnh 15): ") or "15")

cuoc_ban_dau = amount
so_du_ban_dau = 0
tool_running = True  # Bi·∫øn ƒëi·ªÅu khi·ªÉn vi·ªác d·ª´ng tool
colors = [Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE]

def print_colored_ascii_art(text):
    ascii_art = pyfiglet.figlet_format(text)
    lines = ascii_art.splitlines()
    for i, line in enumerate(lines):
        print(colors[i % len(colors)] + line + Style.RESET_ALL)

url = f"https://user.3games.io/user/regist?is_cwallet=1&is_mission_setting=true&version=&time={current_time}"
api_10_van = f"https://api.escapemaster.net/escape_game/recent_10_issues?asset=BUILD"
api_100_van = f"https://api.escapemaster.net/escape_game/recent_100_issues?asset=BUILD"
api_cuoc = "https://api.escapemaster.net/escape_game/bet"

headers = {
    "user-id": user_id,
    "user-login": user_login,
    "user-secret-key": user_secret_key
}

def Login():
    global so_du_ban_dau
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 200:
                username = data["data"]["username"]
                ctoken_contribute = data["data"]["cwallet"]["ctoken_contribute"]
                token_contribute_rounded = round(ctoken_contribute)
                print(Fore.GREEN + f"Username: {username}")
                so_du_ban_dau = token_contribute_rounded
                print(Fore.GREEN + f"S·ªë D∆∞: {token_contribute_rounded} BUILD" + Style.RESET_ALL)
            else:
                print(Fore.RED + f"ƒêƒÉng nh·∫≠p kh√¥ng th√†nh c√¥ng" + Style.RESET_ALL)
                print(Fore.RED + f"Ctrl C ƒë·ªÉ d·ª´ng tool" + Style.RESET_ALL)
                return
        else:
            print(f"L·ªói m·∫°ng")
    except requests.RequestException as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh")
def tong_loi_lo():
    global tool_running
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 200:
                ctoken_contribute = data["data"]["cwallet"]["ctoken_contribute"]
                token_contribute_rounded = round(ctoken_contribute)
                loi_lo = token_contribute_rounded - so_du_ban_dau

                # Ki·ªÉm tra Stop Loss/Take Profit
                if stop_loss_enabled:
                    if loi_lo <= -stop_loss_amount:
                        print(Fore.RED + f"üõë ƒê√É ƒê·∫†T STOP LOSS: {loi_lo} BUILD" + Style.RESET_ALL)
                        print(Fore.RED + f"üõë D·ª™NG TOOL T·ª∞ ƒê·ªòNG!" + Style.RESET_ALL)
                        tool_running = False
                        return
                    elif loi_lo >= take_profit_amount:
                        print(Fore.GREEN + f"üéØ ƒê√É ƒê·∫†T TAKE PROFIT: {loi_lo} BUILD" + Style.RESET_ALL)
                        print(Fore.GREEN + f"üéØ D·ª™NG TOOL T·ª∞ ƒê·ªòNG!" + Style.RESET_ALL)
                        tool_running = False
                        return

                if loi_lo >= 0:
                    print(Fore.GREEN + f"ƒêang l·ªùi: {loi_lo} BUILD" + Style.RESET_ALL)
                else:
                    print(Fore.RED + f"ƒêang l·ªó: {loi_lo} BUILD" + Style.RESET_ALL)
        else:
            print(f"L·ªói m·∫°ng")
    except requests.RequestException as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
vong_choi = None
chuoi_thang = 0
count_thang = 0
def lich_su():
    global vong_choi
    try:
        response = requests.get(api_10_van, headers=headers)
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == 0:
                room_mapping = {
                    1: "Nh√† Kho",
                    2: "Ph√≤ng H·ªçp",
                    3: "Ph√≤ng Gi√°m ƒê·ªëc",
                    4: "Ph√≤ng Tr√≤ Chuy·ªán",
                    5: "Ph√≤ng Gi√°m S√°t",
                    6: "VƒÉn Ph√≤ng",
                    7: "Ph√≤ng T√†i V·ª•",
                    8: "Ph√≤ng Nh√¢n S·ª±"
                }
                issues = data.get("data", [])[:3]
                vong_choi_truoc = issues[0]["issue_id"]
                id_ket_qua_vong_truoc = issues[0]["killed_room_id"]
                ten_phong_vong_truoc = room_mapping.get(id_ket_qua_vong_truoc, "Kh√¥ng x√°c ƒë·ªãnh")
                vong_choi_hien_tai = issues[0]["issue_id"] + 1
                issue_details = []
                for issue in issues:
                    issue_id = issue["issue_id"]
                    killed_room_id = issue["killed_room_id"]
                    room_name = room_mapping.get(killed_room_id, "Kh√¥ng x√°c ƒë·ªãnh")
                    issue_details.append(f"Issue ID: {issue_id}, Room: {room_name}")

                if vong_choi_truoc != vong_choi:
                    print(Fore.LIGHTCYAN_EX + f"V√≤ng ch∆°i hi·ªán t·∫°i: #{vong_choi_hien_tai}" + Style.RESET_ALL)
                    print(Fore.LIGHTYELLOW_EX + f"K·∫øt qu·∫£ v√≤ng tr∆∞·ªõc: #{vong_choi_truoc} | {ten_phong_vong_truoc}" + Style.RESET_ALL)
                    vong_choi = vong_choi_truoc
                    kiem_tra_dieu_kien(issue_details)
                    print("----------------------------------------------------")
    except requests.RequestException as e:
        print(Fore.RED + f"L·ªói: {e}" + Style.RESET_ALL)
number_cuoc = 0
def kiem_tra_dieu_kien(issue_details):
    global number_cuoc,amount,cuoc_ban_dau,chuoi_thang,count_thang,tool_running
    room_mapping = {
            "Nh√† Kho": 1,
            "Ph√≤ng H·ªçp": 2,
            "Ph√≤ng Gi√°m ƒê·ªëc": 3,
            "Ph√≤ng Tr√≤ Chuy·ªán": 4,
            "Ph√≤ng Gi√°m S√°t": 5,
            "VƒÉn Ph√≤ng": 6,
            "Ph√≤ng T√†i V·ª•": 7,
            "Ph√≤ng Nh√¢n S·ª±": 8
        }
    room_0 = issue_details[0].split(",")[1].split(":")[1].strip()
    room_1 = issue_details[1].split(",")[1].split(":")[1].strip()
    room_2 = issue_details[2].split(",")[1].split(":")[1].strip()
    if room_0 != room_1 and number_cuoc == 0 :
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        return
    elif room_0 != room_1 and room_0 != room_2 and number_cuoc == 1 :
        print(Fore.GREEN + f"Tr·ªën s√°t th·ªß th√†nh c√¥ng !")
        tong_loi_lo()
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        chuoi_thang += 1
        print(Fore.LIGHTMAGENTA_EX + f"Chu·ªói th·∫Øng li√™n ti·∫øp hi·ªán t·∫°i: {chuoi_thang} v√°n" + Style.RESET_ALL)
        return
    elif room_0 != room_1 and room_0 == room_2 and number_cuoc == 1 :
        print(Fore.RED + f"Tr·ªën s√°t th·ªß th·∫•t b·∫°i !")
        tong_loi_lo()
        if not tool_running:
            return
        amount = int(amount * multiplier_1)
        print(Fore.YELLOW + f"üí∞ G·∫•p c∆∞·ª£c x{multiplier_1}: {amount} BUILD" + Style.RESET_ALL)
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 2
        chuoi_thang = 0
        return
    # ---------------------------------------------
    elif room_0 != room_1 and room_0 != room_2 and number_cuoc == 2 :
        print(Fore.GREEN + f"Tr·ªën s√°t th·ªß th√†nh c√¥ng !")
        tong_loi_lo()
        if not tool_running:
            return
        amount = cuoc_ban_dau
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        chuoi_thang += 1
        print(Fore.LIGHTMAGENTA_EX + f"Chu·ªói th·∫Øng li√™n ti·∫øp hi·ªán t·∫°i: {chuoi_thang} v√°n" + Style.RESET_ALL)
        return
    elif room_0 != room_1 and room_0 == room_2 and number_cuoc == 2 :
        print(Fore.RED + f"Tr·ªën s√°t th·ªß th·∫•t b·∫°i !")
        tong_loi_lo()
        if not tool_running:
            return
        amount = int(amount * multiplier_2)
        print(Fore.YELLOW + f"üí∞ G·∫•p c∆∞·ª£c x{multiplier_2}: {amount} BUILD" + Style.RESET_ALL)
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 3
        chuoi_thang = 0
        return
    # ----------------------------------
    elif room_0 != room_1 and room_0 != room_2 and number_cuoc == 3 :
        print(Fore.GREEN + f"Tr·ªën s√°t th·ªß th√†nh c√¥ng !")
        tong_loi_lo()
        if not tool_running:
            return
        amount = cuoc_ban_dau
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        chuoi_thang += 1
        print(Fore.LIGHTMAGENTA_EX + f"Chu·ªói th·∫Øng li√™n ti·∫øp hi·ªán t·∫°i: {chuoi_thang} v√°n" + Style.RESET_ALL)
        return
    elif room_0 != room_1 and room_0 == room_2 and number_cuoc == 3 :
        print(Fore.RED + f"Tr·ªën s√°t th·ªß th·∫•t b·∫°i !")
        tong_loi_lo()
        if not tool_running:
            return
        amount = int(amount * multiplier_3)
        print(Fore.YELLOW + f"üí∞ G·∫•p c∆∞·ª£c x{multiplier_3}: {amount} BUILD" + Style.RESET_ALL)
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 4
        chuoi_thang = 0
        return
    # --------------------------------------
    elif room_0 != room_1 and room_0 != room_2 and number_cuoc == 4 :
        print(Fore.GREEN + f"Tr·ªën s√°t th·ªß th√†nh c√¥ng !")
        tong_loi_lo()
        if not tool_running:
            return
        amount = cuoc_ban_dau
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        chuoi_thang += 1
        print(Fore.LIGHTMAGENTA_EX + f"Chu·ªói th·∫Øng li√™n ti·∫øp hi·ªán t·∫°i: {chuoi_thang} v√°n" + Style.RESET_ALL)
        return
    elif room_0 != room_1 and room_0 == room_2 and number_cuoc == 4 :
        print(Fore.RED + f"ƒê√£ ƒë·∫°t g·∫•p c∆∞·ª£c t·ªëi ƒëa !")
        tong_loi_lo()
        if not tool_running:
            return
        amount = cuoc_ban_dau
        room_name = issue_details[1].split(",")[1].split(":")[1].strip()
        room_id = room_mapping.get(room_name, None)
        dat_cuoc(room_id)
        number_cuoc = 1
        chuoi_thang = 0
        return
    # ---------------------------
    elif room_0 == room_1 :
        print(Fore.RED + f"Ph√°t hi·ªán s√°t th·ªß v√†o 1 ph√≤ng li√™n t·ª•c !")
        tong_loi_lo()
        if not tool_running:
            return
        print(Fore.LIGHTMAGENTA_EX + f"Chu·ªói th·∫Øng li√™n ti·∫øp hi·ªán t·∫°i: {chuoi_thang} v√°n" + Style.RESET_ALL)
def dat_cuoc(room_id):
    body = {
        "asset_type": "BUILD",
        "bet_amount": amount,
        "room_id": room_id,
        "user_id": headers["user-id"]
    }
    try:
        response = requests.post(api_cuoc, headers=headers, json=body)
        if response.status_code == 200:
            print(Fore.GREEN + f"C∆∞·ª£c th√†nh c√¥ng {amount} BUILD")
        else:
            print("L·ªói c∆∞·ª£c: ", response.status_code)
    except requests.RequestException as e:
        print(Fore.RED + f"L·ªói c∆∞·ª£c: {e}" + Style.RESET_ALL)

if __name__ == "__main__":
    clear_screen()
    print_colored_ascii_art("HALOTOOL")

    # Hi·ªÉn th·ªã c√†i ƒë·∫∑t
    print(Fore.CYAN + "\n=== C√ÄI ƒê·∫∂T HI·ªÜN T·∫†I ===" + Style.RESET_ALL)
    print(Fore.WHITE + f"S·ªë ti·ªÅn c∆∞·ª£c ban ƒë·∫ßu: {cuoc_ban_dau} BUILD" + Style.RESET_ALL)
    if stop_loss_enabled:
        print(Fore.WHITE + f"Stop Loss: -{stop_loss_amount} BUILD" + Style.RESET_ALL)
        print(Fore.WHITE + f"Take Profit: +{take_profit_amount} BUILD" + Style.RESET_ALL)
    else:
        print(Fore.WHITE + "Stop Loss/Take Profit: T·∫ÆT" + Style.RESET_ALL)

    print(Fore.WHITE + f"H·ªá s·ªë g·∫•p: x{multiplier_1} | x{multiplier_2} | x{multiplier_3}" + Style.RESET_ALL)
    print(Fore.CYAN + "=========================" + Style.RESET_ALL)

    Login()

    try:
        while tool_running:
            lich_su()
            if not tool_running:
                print(Fore.YELLOW + "\nüõë Tool ƒë√£ d·ª´ng do ƒë·∫°t ƒëi·ªÅu ki·ªán Stop Loss/Take Profit!" + Style.RESET_ALL)
                break
            time.sleep(15)
    except KeyboardInterrupt:
        print(Fore.YELLOW + "\nüõë Tool ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng (Ctrl+C)" + Style.RESET_ALL)
