import os
import sys
import time
import json
import socket
import requests
import cloudscraper
from colorama import Fore, init
from pystyle import Colorate, Colors
from rich.console import Console
from rich.table import Table

# Khởi tạo
init(autoreset=True)
console = Console()
scraper = cloudscraper.create_scraper()

BOLD = "\033[1m"
AQUA = "\033[96m"
RESET = "\033[0m"

# Banner
banner = f"""
{Fore.YELLOW}╔════════════════════════════════════════════════════════╗
{Fore.YELLOW}║                                                        ║
{Fore.YELLOW}║   \033[38;2;0;120;255m████████╗ ██████╗  ██████╗ ██╗     \033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;140;255m╚══██╔══╝██╔═══██╗██╔═══██╗██║     \033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;160;255m   ██║   ██║   ██║██║   ██║██║     \033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;180;255m   ██║   ██║   ██║██║   ██║██║     \033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;200;255m   ██║   ╚██████╔╝╚██████╔╝███████╗\033[0m{Fore.YELLOW}║
{Fore.YELLOW}║   \033[38;2;0;220;255m   ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝\033[0m{Fore.YELLOW}║
{Fore.YELLOW}║                                                        ║
{Fore.YELLOW}╚════════════════════════════════════════════════════════╝
{Fore.WHITE}════════════════════════════════════════════════════════════
{Fore.RED}{Fore.WHITE}Phiên Bản: {Fore.YELLOW}TOOL_GOLIKE_TIKTOK_║ ADMIN: \033[38;2;0;220;255mVILÂM
{Fore.WHITE}════════════════════════════════════════════════════════════
[{Fore.RED}⚡{Fore.WHITE}] Zalo: \033[38;2;0;220;255m0368782618
[{Fore.RED}⚡{Fore.WHITE}] Lưu ý: \033[38;2;0;220;255mAE dùng tool bị lỗi thì gọi ADMIN để sửa
{Fore.WHITE}════════════════════════════════════════════════════════════
"""

def kiem_tra_mang():
    try:
        socket.create_connection(("8.8.8.8", 53), timeout=3)
    except OSError:
        print("Mạng không ổn định hoặc bị mất kết nối. Vui lòng kiểm tra lại mạng.")
        sys.exit()

# Gọi kiểm tra mạng và hiện banner
os.system('cls' if os.name == 'nt' else 'clear')
kiem_tra_mang()
print(banner)
time.sleep(1.2)

# Đọc hoặc nhập Authorization + Token
try:
    open("Authorization.txt", "x")
    open("token.txt", "x")
except:
    pass

with open("Authorization.txt", "r") as f: author = f.read().strip()
with open("token.txt", "r") as f: token = f.read().strip()

if not author or not token:
    author = input(Colorate.Diagonal(Colors.red_to_green, " 💸 NHẬP AUTHORIZATION GOLIKE : \033[1;33m"))
    token = input(Colorate.Diagonal(Colors.green_to_red, "💸  NHẬP TOKEN (T CỦA GOLIKE): \033[1;33m"))
    with open("Authorization.txt", "w") as f: f.write(author)
    with open("token.txt", "w") as f: f.write(token)
else:
    print(Colorate.Diagonal(Colors.white_to_black, "=================================================="))
    print(Colorate.Diagonal(Colors.red_to_white, "Nhập [1] Để Vào Tool Golike Threads "))
    print(Colorate.Diagonal(Colors.red_to_white, "Nhập [2] Để Thay Auth Golike Mới "))
    print(Colorate.Diagonal(Colors.white_to_black, "=================================================="))
    chon = input(f"\033[1;32mNhập số : ")
    if chon == "2":
        for i in range(1, 101):
            sys.stdout.write(f"\r{BOLD}{AQUA} ĐANG TIẾN HÀNH XÓA AUTH CŨ : [{i}% {'║' * (i // 2)}]{RESET}")
            sys.stdout.flush()
            time.sleep(0.02)
        os.system('cls' if os.name == 'nt' else 'clear')
        print(banner)
        author = input("\033[1;33mNhập Auth Golike Mới : ")
        token = input("\033[1;32mNhập T Golike Mới : \033[1;33m")
        with open("Authorization.txt", "w") as f: f.write(author)
        with open("token.txt", "w") as f: f.write(token)

# Header chung
headers = {
    'Accept': 'application/json, text/plain, */*',
    'Content-Type': 'application/json;charset=utf-8',
    'Authorization': author,
    't': token,
    'User-Agent': 'Mozilla/5.0',
    'Referer': 'https://app.golike.net/account/manager/threads',
}

def chonacc():
    try:
        res = scraper.get('https://gateway.golike.net/api/threads-account', headers=headers).json()
        return res
    except: return None

def nhannv(account_id):
    try:
        res = scraper.get(
            'https://gateway.golike.net/api/advertising/publishers/threads/jobs',
            headers=headers,
            params={'account_id': account_id}
        ).json()
        return res
    except: return None

def hoanthanh(ads_id, account_id):
    try:
        res = scraper.post(
            'https://gateway.golike.net/api/advertising/publishers/threads/complete-jobs',
            headers=headers,
            json={
                'ads_id': ads_id,
                'account_id': account_id,
                'async': True,
                'data': None
            }
        ).json()
        return res
    except: return None

def baoloi(ads_id, object_id, account_id, job_type):
    try:
        scraper.post('https://gateway.golike.net/api/report/send', headers=headers, json={
            'description': 'Tôi đã làm Job này rồi',
            'users_advertising_id': ads_id,
            'type': 'ads',
            'provider': 'tiktok',
            'fb_id': account_id,
            'error_type': 6,
        })

        scraper.post('https://gateway.golike.net/api/advertising/publishers/threads/skip-jobs', headers=headers, json={
            'ads_id': ads_id,
            'object_id': object_id,
            'account_id': account_id,
            'type': job_type
        })
    except: pass

# Bắt đầu chọn acc
data_acc = chonacc()
if not data_acc or data_acc.get("status") != 200:
    print("\033[1;31mAuthorization hoặc Token sai!")
    sys.exit()

for idx, acc in enumerate(data_acc["data"], 1):
    print(Colorate.Diagonal(Colors.green_to_red, f"[{idx}] {acc['name']} | Online"))

chon = int(input("\nChọn STT tài khoản để chạy: ")) - 1
acc_selected = data_acc["data"][chon]
account_id = acc_selected["id"]
name = acc_selected["name"]

# Chọn cấu hình
os.system('cls' if os.name == 'nt' else 'clear')
print(banner)
delay = int(input("⏳ Delay mỗi job (giây): "))
max_job = int(input("🔁 Số job tối đa mỗi tài khoản: "))
fail_limit = int(input("❌ Số lần lỗi để chuyển acc: "))
proxy_input = input("🌐 Proxy (Enter để bỏ qua): ").strip()
proxies = {
    "http": f"http://{proxy_input}",
    "https": f"http://{proxy_input}"
} if proxy_input else None

# Chọn nhiệm vụ
print("\n[1] Follow")
while True:
    try:
        loai_nv = int(input("Chọn nhiệm vụ (1): "))
        if loai_nv == 1:
            break
        print("Chỉ có nhiệm vụ số 1 hiện tại.")
    except:
        print("Vui lòng nhập số!")

# Chạy job
ads_done = set()
done, tong, fail = 0, 0, 0

while done < max_job:
    job = nhannv(account_id)
    if not job or job.get("status") != 200 or not job["data"].get("link"):
        print("Không nhận được job phù hợp...")
        fail += 1
        time.sleep(2)
        if fail >= fail_limit:
            print("Lỗi nhiều → chuyển acc")
            break
        continue

    ads_id = job["data"]["id"]
    object_id = job["data"]["object_id"]
    job_type = job["data"]["type"]

    if ads_id in ads_done or job_type != "follow":
        baoloi(ads_id, object_id, account_id, job_type)
        continue

    # Đếm ngược delay
    for sec in range(delay, -1, -1):
        color = "\033[1;36m" if sec % 2 else "\033[1;35m"
        print(f"\r{color}Đang chờ {sec}s...", end="")
        time.sleep(1)

    nhantien = hoanthanh(ads_id, account_id)
    if nhantien and nhantien.get("status") == 200:
        tien = nhantien["data"]["prices"]
        tong += tien
        done += 1
        ads_done.add(ads_id)

        table = Table(show_header=True, header_style="bold cyan")
        table.add_column("STT", justify="center")
        table.add_column("Thời gian")
        table.add_column("Tài khoản")
        table.add_column("Trạng thái")
        table.add_column("Tiền", justify="right")
        table.add_column("Tổng", justify="right")
        table.add_row(str(done), time.strftime("%H:%M:%S"), name, "✅", f"{tien}đ", f"{tong}đ")

        os.system('cls' if os.name == 'nt' else 'clear')
        print(banner)
        console.print(table)
        time.sleep(1.5)
    else:
        baoloi(ads_id, object_id, account_id, job_type)
        fail += 1
        if fail >= fail_limit:
            print("Lỗi nhiều quá → chuyển acc")
            break
