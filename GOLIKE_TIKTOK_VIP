import os, sys, socket, time, json
import requests
import cloudscraper
from colorama import Fore, init
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich import box

# Kh·ªüi t·∫°o
init(autoreset=True)
console = Console()
scraper = cloudscraper.create_scraper()

# Ki·ªÉm tra m·∫°ng
def kiem_tra_mang():
    try:
        socket.create_connection(("8.8.8.8", 53), timeout=3)
    except OSError:
        print("M·∫°ng kh√¥ng ·ªïn ƒë·ªãnh ho·∫∑c b·ªã m·∫•t k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra l·∫°i m·∫°ng.")
        sys.exit(1)

kiem_tra_mang()

# Banner
banner = f"""{Fore.YELLOW}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                        ‚ïë
‚ïë   \033[38;2;0;120;255m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     \033[0m{Fore.YELLOW}‚ïë
‚ïë   \033[38;2;0;140;255m‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     \033[0m{Fore.YELLOW}‚ïë
‚ïë   \033[38;2;0;160;255m   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     \033[0m{Fore.YELLOW}‚ïë
‚ïë   \033[38;2;0;180;255m   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     \033[0m{Fore.YELLOW}‚ïë
‚ïë   \033[38;2;0;200;255m   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\033[0m{Fore.YELLOW}‚ïë
‚ïë   \033[38;2;0;220;255m   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\033[0m{Fore.YELLOW}‚ïë
‚ïë                                                        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
{Fore.WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Phi√™n B·∫£n: {Fore.YELLOW}TOOL_GOLIKE_TIKTOK_‚ïë ADMIN: \033[38;2;0;220;255mVIL√ÇM
{Fore.WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
[{Fore.RED}‚ö°{Fore.WHITE}] Zalo: \033[38;2;0;220;255m0368782618
[{Fore.RED}‚ö°{Fore.WHITE}] L∆∞u √Ω: \033[38;2;0;220;255mG·ªçi admin n·∫øu l·ªói
{Fore.WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 TOOL n√†y c√≥ l·ªçc t√†i kho·∫£n ri√™ng t∆∞ TIKTOK v√† l·ªçc JOB 42vnd
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
os.system('cls' if os.name == 'nt' else 'clear')
print(banner)

# ƒêƒÉng nh·∫≠p Authorization
try:
    with open("Auth.txt", "r") as f1, open("token.txt", "r") as f2:
        author = f1.read().strip()
        token = f2.read().strip()
except:
    print("\033[1;31mCh∆∞a c√≥ file Auth.txt v√† token.txt")
    sys.exit(1)

print("Nh·∫≠p [1] D√πng Authorization/Token hi·ªán t·∫°i")
print("Nh·∫≠p [2] Nh·∫≠p m·ªõi Authorization/Token")
chon = input("Nh·∫≠p l·ª±a ch·ªçn (1 ho·∫∑c 2): ").strip()

if chon == "2":
    author = input("NH·∫¨P AUTHORIZATION GOLIKE: ").strip()
    token = input("NH·∫¨P TOKEN GOLIKE: ").strip()
    with open("Auth.txt", "w") as f1, open("token.txt", "w") as f2:
        f1.write(author)
        f2.write(token)
elif chon != "1":
    print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
    sys.exit(1)

# Headers cho API
headers = {
    'Accept': 'application/json, text/plain, */*',
    'Content-Type': 'application/json;charset=utf-8',
    'Authorization': author,
    't': token,
    'User-Agent': 'Mozilla/5.0',
    'Referer': 'https://app.golike.net/account/manager/tiktok',
}

# L·∫•y danh s√°ch t√†i kho·∫£n
def chonacc():
    try:
        res = scraper.get('https://gateway.golike.net/api/tiktok-account', headers=headers)
        data = res.json()
        return data if data.get("status") == 200 else None
    except:
        return None

accounts = chonacc()
if not accounts:
    print("Kh√¥ng l·∫•y ƒë∆∞·ª£c t√†i kho·∫£n TikTok. Ki·ªÉm tra Auth ho·∫∑c T")
    sys.exit(1)

for i, acc in enumerate(accounts["data"], 1):
    print(f"{Fore.CYAN}[{i}] {Fore.YELLOW}{acc['nickname']}")

while True:
    try:
        index = int(input("Ch·ªçn t√†i kho·∫£n TikTok mu·ªën ch·∫°y: ")) - 1
        acc = accounts["data"][index]
        break
    except:
        print("Sai ƒë·ªãnh d·∫°ng ho·∫∑c s·ªë kh√¥ng h·ª£p l·ªá!")

account_id = acc["id"]
nickname = acc["nickname"]

# Nh·∫≠p delay v√† s·ªë l·∫ßn ƒë·ªïi acc
while True:
    try:
        delay = int(input("Delay m·ªói job (gi√¢y): "))
        if delay >= 0: break
    except: pass
    print("Sai ƒë·ªãnh d·∫°ng!")

while True:
    try:
        doi_acc = int(input("S·ªë l·∫ßn fail th√¨ ƒë·ªïi acc: "))
        if doi_acc > 0: break
    except: pass
    print("Sai ƒë·ªãnh d·∫°ng!")

# Dashboard
def display_dashboard(nick, price, done, total, link, status, delay_str):
    os.system('cls' if os.name == 'nt' else 'clear')
    table = Table(title="üìã TH√îNG TIN JOB GOLIKE", box=box.ROUNDED, border_style="white")
    table.add_column("üìå M·ª•c", style="bold cyan")
    table.add_column("üì§ Th√¥ng tin", style="bold magenta")
    table.add_row("üë§ Nick TikTok", nick)
    table.add_row("üí∞ Gi√°", price)
    table.add_row("‚úÖ Job th√†nh c√¥ng", str(done))
    table.add_row("üíµ T·ªïng ti·ªÅn", str(total))
    table.add_row("üîó Link job", link)
    table.add_row("üì° Tr·∫°ng th√°i", status)
    table.add_row("‚è≥ Delay", delay_str)
    console.print(table)
    console.print(Panel.fit("üî• [bold green]Ch√∫c b·∫°n c√†y GoLike vui v·∫ª üòö", border_style="green"))

# Countdown
def countdown(seconds, *args):
    for i in range(seconds, -1, -1):
        display_dashboard(*args, f"{i} gi√¢y")
        time.sleep(1)

# M·ªü link TikTok
def open_link(link):
    try:
        if "android" in sys.platform.lower():
            os.system(f"termux-open-url '{link}'")
        else:
            import webbrowser
            webbrowser.open(link)
        time.sleep(2)
    except:
        print("Kh√¥ng m·ªü ƒë∆∞·ª£c link. Vui l√≤ng m·ªü th·ªß c√¥ng:", link)

# G·ªçi API nh·∫≠n job
def get_job(account_id):
    try:
        res = scraper.get("https://gateway.golike.net/api/advertising/publishers/tiktok/jobs",
                          headers=headers,
                          params={"account_id": account_id})
        return res.json()
    except:
        return None

# G·ªçi API ho√†n th√†nh job
def complete_job(ads_id, account_id):
    try:
        res = scraper.post("https://gateway.golike.net/api/advertising/publishers/tiktok/complete-jobs",
                           headers=headers,
                           json={"ads_id": ads_id, "account_id": account_id, "async": True})
        return res.json()
    except:
        return None

# G·ªçi API b√°o l·ªói job
def skip_job(ads_id, object_id, account_id, job_type):
    try:
        scraper.post("https://gateway.golike.net/api/report/send",
                     headers=headers,
                     json={"description": "T√¥i ƒë√£ l√†m job r·ªìi", "users_advertising_id": ads_id,
                           "type": "ads", "provider": "tiktok", "fb_id": account_id, "error_type": 6})
        scraper.post("https://gateway.golike.net/api/advertising/publishers/tiktok/skip-jobs",
                     headers=headers,
                     json={"ads_id": ads_id, "object_id": object_id,
                           "account_id": account_id, "type": job_type})
    except:
        pass

# MAIN LOOP
dem, tong, fail = 0, 0, 0
current_status = "Kh·ªüi ƒë·ªông"
while True:
    job = get_job(account_id)
    if not job or job.get("status") != 200 or not job["data"].get("link"):
        current_status = "Kh√¥ng c√≥ job"
        fail += 1
        display_dashboard(nickname, "N/A", dem, tong, "N/A", current_status, "")
        time.sleep(2)
        if fail >= doi_acc:
            print("ƒê·ªïi t√†i kho·∫£n do l·ªói nhi·ªÅu.")
            sys.exit(0)
        continue

    data = job["data"]
    if data.get("price_per_after_cost") != 42 or data.get("type") != "follow":
        skip_job(data["id"], data["object_id"], account_id, data["type"])
        continue

    link = data["link"]
    ads_id = data["id"]
    object_id = data["object_id"]
    price_str = "42 vnd"
    current_status = "L√†m job"
    display_dashboard(nickname, price_str, dem, tong, link, current_status, "")
    open_link(link)
    countdown(delay, nickname, price_str, dem, tong, link, current_status)

    result = complete_job(ads_id, account_id)
    if result and result.get("status") == 200:
        dem += 1
        tong += 42
        current_status = "Th√†nh c√¥ng"
        display_dashboard(nickname, price_str, dem, tong, link, current_status, "")
    else:
        skip_job(ads_id, object_id, account_id, data["type"])
        current_status = "Th·∫•t b·∫°i"
        fail += 1
        display_dashboard(nickname, price_str, dem, tong, link, current_status, "")
    time.sleep(2)
